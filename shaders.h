//////////////////////////////////////////////////////////////////////
// (c) Janusz Ganczarski
// http://www.januszg.hg.pl
// JanuszG@enter.net.pl
//////////////////////////////////////////////////////////////////////

#ifndef __SHADERS__H__
#define __SHADERS__H__
#include <GL\glew.h>


//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera z pliku i jego kompilacja,
// rodzaj shadera okreœla parametr type; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadShader( const GLenum type, const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera i jego kompilacja,
// rodzaj shadera okreœla parametr type; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadShader( const GLenum type, const char **src );

//////////////////////////////////////////////////////////////////////
// wy³¹czenie obs³ugi w przypadku OpenGL ES 2.0
//////////////////////////////////////////////////////////////////////
#if !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera kontroli teselacji z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadTessControlShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera kontroli teselacji
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadTessControlShader( const char **src );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera ewaluacji teselacji z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadTessEvaluationShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera ewaluacji teselacji
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadTessEvaluationShader( const char **src );

#endif // !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera wierzcho³ków z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadVertexShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera wierzcho³ków
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadVertexShader( const char **src );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera fragmentów z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadFragmentShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera fragmentów
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadFragmentShader( const char **src );

//////////////////////////////////////////////////////////////////////
// wy³¹czenie obs³ugi w przypadku OpenGL ES 2.0
//////////////////////////////////////////////////////////////////////
#if !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera geometrii z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadGeometryShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera geometrii
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadGeometryShader( const char **src );

#endif // !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// powi¹zanie obiektu shadera z obiektem programu; 
// w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachShader( GLuint &program, const GLuint shader );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera fragmentów, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachFragmentShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera fragmentów, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachFragmentShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// wy³¹czenie obs³ugi w przypadku OpenGL ES 2.0
//////////////////////////////////////////////////////////////////////
#if !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera geometrii, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachGeometryShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera geometrii, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachGeometryShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera kontroli teselacji, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachTessControlShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera kontroli teselacji, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachTessControlShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera ewaluacji teselacji, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachTessEvaluationShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera ewaluacji teselacji, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachTessEvaluationShader( GLuint &program, const char **src );

#endif // !( defined GL_ES_VERSION_2_0 || defined CONTEXT_ES2_PROFILE )

//////////////////////////////////////////////////////////////////////
// konsolidacja i walidacja obiektu programu
//////////////////////////////////////////////////////////////////////
void LinkProgram( GLuint program );

#endif // __SHADERS__H__
